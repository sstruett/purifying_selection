"""Simulate a travelling wave

Simulate and calculate velocity and fitness distribution for the given range of parameters

"""

import re
import sys
import numpy as np
import pandas as pd


configfile: "config/config.yaml"

parlist = config["simulation"]["parameters"]

# parameters to expand over
par_N = [_[0] for _ in parlist]
par_s = [_[1] for _ in parlist]
par_U = [_[2] for _ in parlist]
par_r = [_[3] for _ in parlist]


def target_files(wildcards, verbose=True):
    """Define target files of the workflow"""
    target_file_list = []


    target_file_list.extend(
        expand(
            "results/table/popsize_{N},delmutrate_{U},selcoeff_{s}.gzip",
            zip,
            N=par_N,
            s=par_s, 
            U=par_U
        )
    )

    # sort files by N, U, s
    def extract_values(filename):
        fsplit = re.split(r"/|_|,", filename.split(".gzip")[0])
        return tuple(map(float, [fsplit[fsplit.index("popsize")+1], fsplit[fsplit.index("delmutrate")+1], fsplit[fsplit.index("selcoeff")+1]]))

    sorted_filenames = sorted(target_file_list, key=extract_values)

    if verbose:
        print("_"*80)
        print("Target files:")
        for filix, file in enumerate(sorted_filenames, start=1):
            print(f"\t{filix}.)\t{file}")

        print("="*80, end="\n"*2)



    return sorted_filenames


rule overall:
    input: target_files


def get_nsam(wc):
    # get the num repetitions for the given parameters
    nid = np.where([int(round(float(wc.N))) == int(round(float(_))) for _ in par_N])[0]
    uid = np.where([float(wc.U) == float(_) for _ in par_U])[0]
    sid = np.where([float(wc.s) == float(_) for _ in par_s])[0]

    rid = list(set(nid).intersection(uid, sid))
    assert len(rid) == 1, f"Your param combins are not unique! {len(rid)}"
    r = par_r[rid[0]]

    return expand("results/data/popsize_{{N}}/delmutrate_{{U}}/selcoeff_{{s}}/sample_{r}.gzip",
        r=range(r)
        )


rule aggregate_tables:
    output:
        table="results/table/popsize_{N},delmutrate_{U},selcoeff_{s}.gzip"
    input:
        data=get_nsam
    run:
        pd.concat([pd.read_pickle(_) for _ in input.data[::-1]]).sort_index(
            ).to_pickle(output.table)


rule simulate:
    output:
        data="results/data/popsize_{N}/delmutrate_{U}/selcoeff_{s}/sample_{r}.gzip"
    params:
        g=lambda wc: int(round(float(wc.N))*2),
        b=lambda wc: int(round(float(wc.N))*0.5),
    resources:
        mem_mb=lambda wc: int(wc.N)
    script: "scripts/throw_a_stone_smk_script.py"

